<!DOCTYPE html>
<!-- saved from url=(0026)http://192.168.1.105:4321/ -->
<html class="gr__192_168_1_105"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>main cpu</title>

<style type="text/css">
html {
  height: 100%;
  min-height: 100%;
  margin: 0px;
}
body {
  margin: 0px;
  width: 100%;
  height: 100%;
  min-height: 100%;
  overflow: hidden;
}
#graphcontainer {
  display: flex;
  flex-direction: column;
  height: 100%;
  min-height: 100%;
  width: 100%;
  min-width: 100%;
  margin: 0px;
}
#graph {
  flex: 1 1 auto;
  overflow: hidden;
}
svg {
  width: 100%;
  height: auto;
}
button {
  margin-top: 5px;
  margin-bottom: 5px;
}
#detailtext {
  display: none;
  position: fixed;
  top: 20px;
  right: 10px;
  background-color: #ffffff;
  min-width: 160px;
  border: 1px solid #888;
  box-shadow: 4px 4px 4px 0px rgba(0,0,0,0.2);
  z-index: 1;
}
#closedetails {
  float: right;
  margin: 2px;
}
#home {
  font-size: 14pt;
  padding-left: 0.5em;
  padding-right: 0.5em;
  float: right;
}
.menubar {
  display: inline-block;
  background-color: #f8f8f8;
  border: 1px solid #ccc;
  width: 100%;
}
.menu-header {
  position: relative;
  display: inline-block;
  padding: 2px 2px;
  font-size: 14pt;
}
.menu {
  display: none;
  position: absolute;
  background-color: #f8f8f8;
  border: 1px solid #888;
  box-shadow: 4px 4px 4px 0px rgba(0,0,0,0.2);
  z-index: 1;
  margin-top: 2px;
  left: 0px;
  min-width: 5em;
}
.menu-header, .menu {
  cursor: default;
  user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -webkit-user-select: none;
}
.menu hr {
  background-color: #fff;
  margin-top: 0px;
  margin-bottom: 0px;
}
.menu a, .menu button {
  display: block;
  width: 100%;
  margin: 0px;
  padding: 2px 0px 2px 0px;
  text-align: left;
  text-decoration: none;
  color: #000;
  background-color: #f8f8f8;
  font-size: 12pt;
  border: none;
}
.menu-header:hover {
  background-color: #ccc;
}
.menu a:hover, .menu button:hover {
  background-color: #ccc;
}
.menu a.disabled {
  color: gray;
  pointer-events: none;
}
#searchbox {
  margin-left: 10pt;
}
#bodycontainer {
  width: 100%;
  height: 100%;
  max-height: 100%;
  overflow: scroll;
  padding-top: 5px;
}
#toptable {
  border-spacing: 0px;
  width: 100%;
  padding-bottom: 1em;
}
#toptable tr th {
  border-bottom: 1px solid black;
  text-align: right;
  padding-left: 1em;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
}
#toptable tr td {
  padding-left: 1em;
  font: monospace;
  text-align: right;
  white-space: nowrap;
  cursor: default;
}
#toptable tr th:nth-child(6),
#toptable tr th:nth-child(7),
#toptable tr td:nth-child(6),
#toptable tr td:nth-child(7) {
  text-align: left;
}
#toptable tr td:nth-child(6) {
  max-width: 30em;  
  overflow: hidden;
}
#flathdr1, #flathdr2, #cumhdr1, #cumhdr2, #namehdr {
  cursor: ns-resize;
}
.hilite {
  background-color: #ccf;
}
</style>

</head>
<body data-gr-c-s-loaded="true">


<div id="detailtext">
<button id="closedetails">Close</button>
<div>File: main</div><div>Type: cpu</div><div>Time: Sep 24, 2018 at 12:29am (CST)</div><div>Duration: 5.03s, Total samples = 1860ms (36.99%)</div><div>Showing nodes accounting for 1860ms, 100% of 1860ms total</div>
</div>

<div class="menubar">

<div class="menu-header">
View
<div class="menu">
<a title="Outputs top entries in text form" href="http://192.168.1.105:4321/top" id="topbtn">Top</a>
<a title="Display profile as a directed graph" href="http://192.168.1.105:4321/" id="graphbtn">Graph</a>
<a title="Output callers/callees of functions matching regexp" href="http://192.168.1.105:4321/peek" id="peek">Peek</a>
<a title="Output annotated source for functions matching regexp" href="http://192.168.1.105:4321/source" id="list">Source</a>
<a title="Output assembly listings annotated with samples" href="http://192.168.1.105:4321/disasm" id="disasm">Disassemble</a>
<hr>
<button title="Show information about the profile and this view" id="details">Details</button>
</div>
</div>

<div class="menu-header">
Refine
<div class="menu">
<a title="Restricts to samples going through a node matching regexp
Discard samples that do not include a node matching this regexp.
Matching includes the function name, filename or object name.
" href="http://192.168.1.105:4321/" id="focus" class="disabled">Focus</a>
<a title="Skips paths going through any nodes matching regexp
If set, discard samples that include a node matching this regexp.
Matching includes the function name, filename or object name.
" href="http://192.168.1.105:4321/" id="ignore" class="disabled">Ignore</a>
<a title="Skips nodes matching regexp
Discard nodes that match this location.
Other nodes from samples that include this location will be shown.
Matching includes the function name, filename or object name.
" href="http://192.168.1.105:4321/" id="hide" class="disabled">Hide</a>
<a title="Only show nodes matching regexp
If set, only show nodes that match this location.
Matching includes the function name, filename or object name.
" href="http://192.168.1.105:4321/" id="show" class="disabled">Show</a>
<hr>
<a title="Show the entire profile" href="http://192.168.1.105:4321/">Reset</a>
</div>
</div>

<input id="searchbox" type="text" placeholder="Search regexp" autocomplete="off" autocapitalize="none" size="40">

<span id="home">main cpu</span>

</div> 

<div id="errors"></div>

<div id="graphcontainer">
<div id="graph">
<svg width="260pt" height="486pt" viewBox="0.00 0.00 260.00 486.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 482)">
<title>main</title>
<polygon fill="white" stroke="none" points="-4,4 -4,-482 256,-482 256,4 -4,4"></polygon>
<!-- N1 -->
<g id="node1" class="node"><title>N1</title>
<g id="a_node1"><a xlink:title="main.d (1520ms)">
<polygon fill="#edd6d5" stroke="#b20a00" points="245.5,-86 56.5,-86 56.5,-0 245.5,-0 245.5,-86"></polygon>
<text text-anchor="middle" x="151" y="-62.8" font-family="Times,serif" font-size="24.00">main</text>
<text text-anchor="middle" x="151" y="-36.8" font-family="Times,serif" font-size="24.00">d</text>
<text text-anchor="middle" x="151" y="-10.8" font-family="Times,serif" font-size="24.00">1520ms (81.72%)</text>
</a>
</g>
</g>
<!-- N2 -->
<g id="node2" class="node"><title>N2</title>
<g id="a_node2"><a xlink:title="runtime.main (1860ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="116,-478 34,-478 34,-442 116,-442 116,-478"></polygon>
<text text-anchor="middle" x="75" y="-467.1" font-family="Times,serif" font-size="8.00">runtime</text>
<text text-anchor="middle" x="75" y="-458.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="75" y="-449.1" font-family="Times,serif" font-size="8.00">0 of 1860ms (100%)</text>
</a>
</g>
</g>
<!-- N6 -->
<g id="node6" class="node"><title>N6</title>
<g id="a_node6"><a xlink:title="main.main (1860ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="116,-391 34,-391 34,-355 116,-355 116,-391"></polygon>
<text text-anchor="middle" x="75" y="-380.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="75" y="-371.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="75" y="-362.1" font-family="Times,serif" font-size="8.00">0 of 1860ms (100%)</text>
</a>
</g>
</g>
<!-- N2&#45;&gt;N6 -->
<g id="edge2" class="edge"><title>N2-&gt;N6</title>
<g id="a_edge2"><a xlink:title="runtime.main -&gt; main.main (1860ms)">
<path fill="none" stroke="#b20000" stroke-width="6" d="M75,-441.799C75,-430.163 75,-414.548 75,-401.237"></path>
<polygon fill="#b20000" stroke="#b20000" stroke-width="6" points="80.2501,-401.175 75,-391.175 69.7501,-401.175 80.2501,-401.175"></polygon>
</a>
</g>
<g id="a_edge2-label"><a xlink:title="runtime.main -&gt; main.main (1860ms)">
<text text-anchor="middle" x="99" y="-412.8" font-family="Times,serif" font-size="14.00"> 1860ms</text>
</a>
</g>
</g>
<!-- N3 -->
<g id="node3" class="node"><title>N3</title>
<g id="a_node3"><a xlink:title="main.a (1860ms)">
<polygon fill="#edd5d5" stroke="#b20000" points="116,-304 34,-304 34,-268 116,-268 116,-304"></polygon>
<text text-anchor="middle" x="75" y="-293.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="75" y="-284.1" font-family="Times,serif" font-size="8.00">a</text>
<text text-anchor="middle" x="75" y="-275.1" font-family="Times,serif" font-size="8.00">0 of 1860ms (100%)</text>
</a>
</g>
</g>
<!-- N4 -->
<g id="node4" class="node"><title>N4</title>
<g id="a_node4"><a xlink:title="main.b (1100ms)">
<polygon fill="#edd8d5" stroke="#b21a00" points="150,-217 1.42109e-14,-217 1.42109e-14,-137 150,-137 150,-217"></polygon>
<text text-anchor="middle" x="75" y="-200.2" font-family="Times,serif" font-size="16.00">main</text>
<text text-anchor="middle" x="75" y="-182.2" font-family="Times,serif" font-size="16.00">b</text>
<text text-anchor="middle" x="75" y="-164.2" font-family="Times,serif" font-size="16.00">340ms (18.28%)</text>
<text text-anchor="middle" x="75" y="-146.2" font-family="Times,serif" font-size="16.00">of 1100ms (59.14%)</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;N4 -->
<g id="edge3" class="edge"><title>N3-&gt;N4</title>
<g id="a_edge3"><a xlink:title="main.a -&gt; main.b (1100ms)">
<path fill="none" stroke="#b21a00" stroke-width="3" d="M75,-267.809C75,-256.875 75,-242.111 75,-227.714"></path>
<polygon fill="#b21a00" stroke="#b21a00" stroke-width="3" points="78.5001,-227.356 75,-217.356 71.5001,-227.356 78.5001,-227.356"></polygon>
</a>
</g>
<g id="a_edge3-label"><a xlink:title="main.a -&gt; main.b (1100ms)">
<text text-anchor="middle" x="99" y="-238.8" font-family="Times,serif" font-size="14.00"> 1100ms</text>
</a>
</g>
</g>
<!-- N5 -->
<g id="node5" class="node"><title>N5</title>
<g id="a_node5"><a xlink:title="main.c (760ms)">
<polygon fill="#eddbd5" stroke="#b22a00" points="252,-195 168,-195 168,-159 252,-159 252,-195"></polygon>
<text text-anchor="middle" x="210" y="-184.1" font-family="Times,serif" font-size="8.00">main</text>
<text text-anchor="middle" x="210" y="-175.1" font-family="Times,serif" font-size="8.00">c</text>
<text text-anchor="middle" x="210" y="-166.1" font-family="Times,serif" font-size="8.00">0 of 760ms (40.86%)</text>
</a>
</g>
</g>
<!-- N3&#45;&gt;N5 -->
<g id="edge4" class="edge"><title>N3-&gt;N5</title>
<g id="a_edge4"><a xlink:title="main.a -&gt; main.c (760ms)">
<path fill="none" stroke="#b22a00" stroke-width="3" d="M101.625,-267.984C109.905,-262.454 118.965,-256.153 127,-250 146.784,-234.851 167.988,-216.416 184.012,-201.992"></path>
<polygon fill="#b22a00" stroke="#b22a00" stroke-width="3" points="186.374,-204.575 191.433,-195.266 181.673,-199.388 186.374,-204.575"></polygon>
</a>
</g>
<g id="a_edge4-label"><a xlink:title="main.a -&gt; main.c (760ms)">
<text text-anchor="middle" x="165.5" y="-238.8" font-family="Times,serif" font-size="14.00"> 760ms</text>
</a>
</g>
</g>
<!-- N4&#45;&gt;N1 -->
<g id="edge5" class="edge"><title>N4-&gt;N1</title>
<g id="a_edge5"><a xlink:title="main.b -&gt; main.d (760ms)">
<path fill="none" stroke="#b22a00" stroke-width="3" d="M97.5967,-136.753C105.134,-123.662 113.645,-108.88 121.621,-95.0266"></path>
<polygon fill="#b22a00" stroke="#b22a00" stroke-width="3" points="124.813,-96.4972 126.769,-86.0846 118.747,-93.0044 124.813,-96.4972"></polygon>
</a>
</g>
<g id="a_edge5-label"><a xlink:title="main.b -&gt; main.d (760ms)">
<text text-anchor="middle" x="136.5" y="-107.8" font-family="Times,serif" font-size="14.00"> 760ms</text>
</a>
</g>
</g>
<!-- N5&#45;&gt;N1 -->
<g id="edge6" class="edge"><title>N5-&gt;N1</title>
<g id="a_edge6"><a xlink:title="main.c -&gt; main.d (760ms)">
<path fill="none" stroke="#b22a00" stroke-width="3" d="M202.287,-158.743C195.126,-142.723 184.096,-118.044 174.096,-95.6735"></path>
<polygon fill="#b22a00" stroke="#b22a00" stroke-width="3" points="177.165,-93.9605 169.889,-86.2592 170.774,-96.8169 177.165,-93.9605"></polygon>
</a>
</g>
<g id="a_edge6-label"><a xlink:title="main.c -&gt; main.d (760ms)">
<text text-anchor="middle" x="204.5" y="-107.8" font-family="Times,serif" font-size="14.00"> 760ms</text>
</a>
</g>
</g>
<!-- N6&#45;&gt;N3 -->
<g id="edge1" class="edge"><title>N6-&gt;N3</title>
<g id="a_edge1"><a xlink:title="main.main -&gt; main.a (1860ms)">
<path fill="none" stroke="#b20000" stroke-width="6" d="M75,-354.799C75,-343.163 75,-327.548 75,-314.237"></path>
<polygon fill="#b20000" stroke="#b20000" stroke-width="6" points="80.2501,-314.175 75,-304.175 69.7501,-314.175 80.2501,-314.175"></polygon>
</a>
</g>
<g id="a_edge1-label"><a xlink:title="main.main -&gt; main.a (1860ms)">
<text text-anchor="middle" x="99" y="-325.8" font-family="Times,serif" font-size="14.00"> 1860ms</text>
</a>
</g>
</g>
</g>
</svg>

</div>

</div>

<script>


function initPanAndZoom(svg, clickHandler) {
  'use strict';

  
  const IDLE = 0
  const MOUSEPAN = 1
  const TOUCHPAN = 2
  const TOUCHZOOM = 3
  let mode = IDLE

  
  let currentScale = 1.0
  const initWidth = svg.viewBox.baseVal.width
  const initHeight = svg.viewBox.baseVal.height

  
  let panLastX = 0      
  let panLastY = 0      
  let moved = false     
  let touchid = null    

  
  let touchid2 = null     
  let initGap = 1.0       
  let initScale = 1.0     
  let centerPoint = null  

  
  function toSvg(x, y) {
    const p = svg.createSVGPoint()
    p.x = x
    p.y = y
    let m = svg.getCTM()
    if (m == null) m = svg.getScreenCTM()  
    return p.matrixTransform(m.inverse())
  }

  
  
  function rescale(s, u) {
    
    if (s < 0.2) s = 0.2
    if (s > 10.0) s = 10.0

    currentScale = s

    
    
    
    const vb = svg.viewBox
    const w1 = vb.baseVal.width
    const w2 = initWidth / s
    const h1 = vb.baseVal.height
    const h2 = initHeight / s
    vb.baseVal.width = w2
    vb.baseVal.height = h2

    
    
    
    
    
    
    
    vb.baseVal.x = u.x - (u.x - vb.baseVal.x) * (w2 / w1)
    vb.baseVal.y = u.y - (u.y - vb.baseVal.y) * (h2 / h1)
  }

  function handleWheel(e) {
    if (e.deltaY == 0) return
    
    rescale(currentScale * (e.deltaY < 0 ? 1.1 : (1/1.1)),
            toSvg(e.offsetX, e.offsetY))
  }

  function setMode(m) {
    mode = m
    touchid = null
    touchid2 = null
  }

  function panStart(x, y) {
    moved = false
    panLastX = x
    panLastY = y
  }

  function panMove(x, y) {
    let dx = x - panLastX
    let dy = y - panLastY
    if (Math.abs(dx) <= 2 && Math.abs(dy) <= 2) return  

    moved = true
    panLastX = x
    panLastY = y

    
    const swidth = svg.clientWidth || svg.parentNode.clientWidth
    const sheight = svg.clientHeight || svg.parentNode.clientHeight

    
    dx *= (svg.viewBox.baseVal.width / swidth)
    dy *= (svg.viewBox.baseVal.height / sheight)

    svg.viewBox.baseVal.x -= dx
    svg.viewBox.baseVal.y -= dy
  }

  function handleScanStart(e) {
    if (e.button != 0) return  
    setMode(MOUSEPAN)
    panStart(e.clientX, e.clientY)
    e.preventDefault()
    svg.addEventListener("mousemove", handleScanMove)
  }

  function handleScanMove(e) {
    if (e.buttons == 0) {
      
      setMode(IDLE)
      svg.removeEventListener("mousemove", handleScanMove)
      return
    }
    if (mode == MOUSEPAN) panMove(e.clientX, e.clientY)
  }

  function handleScanEnd(e) {
    if (mode == MOUSEPAN) panMove(e.clientX, e.clientY)
    setMode(IDLE)
    svg.removeEventListener("mousemove", handleScanMove)
    if (!moved) clickHandler(e.target)
  }

  
  function findTouch(tlist, id) {
    for (const t of tlist) {
      if (t.identifier == id) return t
    }
    return null
  }

 
  function touchGap(t1, t2) {
    const dx = t1.clientX - t2.clientX
    const dy = t1.clientY - t2.clientY
    return Math.hypot(dx, dy)
  }

  function handleTouchStart(e) {
    if (mode == IDLE && e.changedTouches.length == 1) {
      
      const t = e.changedTouches[0]
      setMode(TOUCHPAN)
      touchid = t.identifier
      panStart(t.clientX, t.clientY)
      e.preventDefault()
    } else if (mode == TOUCHPAN && e.touches.length == 2) {
      
      setMode(TOUCHZOOM)
      const t1 = e.touches[0]
      const t2 = e.touches[1]
      touchid = t1.identifier
      touchid2 = t2.identifier
      initScale = currentScale
      initGap = touchGap(t1, t2)
      centerPoint = toSvg((t1.clientX + t2.clientX) / 2,
                          (t1.clientY + t2.clientY) / 2)
      e.preventDefault()
    }
  }

  function handleTouchMove(e) {
    if (mode == TOUCHPAN) {
      const t = findTouch(e.changedTouches, touchid)
      if (t == null) return
      if (e.touches.length != 1) {
        setMode(IDLE)
        return
      }
      panMove(t.clientX, t.clientY)
      e.preventDefault()
    } else if (mode == TOUCHZOOM) {
      
      const t1 = findTouch(e.touches, touchid)
      const t2 = findTouch(e.touches, touchid2)
      if (t1 == null || t2 == null) return
      const gap = touchGap(t1, t2)
      rescale(initScale * gap / initGap, centerPoint)
      e.preventDefault()
    }
  }

  function handleTouchEnd(e) {
    if (mode == TOUCHPAN) {
      const t = findTouch(e.changedTouches, touchid)
      if (t == null) return
      panMove(t.clientX, t.clientY)
      setMode(IDLE)
      e.preventDefault()
      if (!moved) clickHandler(t.target)
    } else if (mode == TOUCHZOOM) {
      setMode(IDLE)
      e.preventDefault()
    }
  }

  svg.addEventListener("mousedown", handleScanStart)
  svg.addEventListener("mouseup", handleScanEnd)
  svg.addEventListener("touchstart", handleTouchStart)
  svg.addEventListener("touchmove", handleTouchMove)
  svg.addEventListener("touchend", handleTouchEnd)
  svg.addEventListener("wheel", handleWheel, true)
}

function initMenus() {
  'use strict';

  let activeMenu = null;
  let activeMenuHdr = null;

  function cancelActiveMenu() {
    if (activeMenu == null) return;
    activeMenu.style.display = "none";
    activeMenu = null;
    activeMenuHdr = null;
  }

  
  for (const menu of document.getElementsByClassName("menu")) {
    const hdr = menu.parentElement;
    if (hdr == null) return;
    function showMenu(e) {
      
      
      if (e.target != hdr) return;
      activeMenu = menu;
      activeMenuHdr = hdr;
      menu.style.display = "block";
    }
    hdr.addEventListener("mousedown", showMenu);
    hdr.addEventListener("touchstart", showMenu);
  }

  
  for (const t of ["mousedown", "touchstart"]) {
    document.addEventListener(t, (e) => {
      
      
      if (activeMenuHdr != e.target.closest(".menu-header")) {
        cancelActiveMenu();
      }
    }, { passive: true, capture: true });
  }

  
  document.addEventListener("mouseup", (e) => {
    if (activeMenu == e.target.closest(".menu")) {
      cancelActiveMenu();
    }
  }, { passive: true, capture: true });
}

function viewer(baseUrl, nodes) {
  'use strict';

  
  const search = document.getElementById("searchbox")
  const graph0 = document.getElementById("graph0")
  const svg = (graph0 == null ? null : graph0.parentElement)
  const toptable = document.getElementById("toptable")

  let regexpActive = false
  let selected = new Map()
  let origFill = new Map()
  let searchAlarm = null
  let buttonsEnabled = true

  function handleDetails() {
    const detailsText = document.getElementById("detailtext")
    if (detailsText != null) detailsText.style.display = "block"
  }

  function handleCloseDetails() {
    const detailsText = document.getElementById("detailtext")
    if (detailsText != null) detailsText.style.display = "none"
  }

  function handleKey(e) {
    if (e.keyCode != 13) return
    window.location.href =
        updateUrl(new URL("/", window.location.href), "f")
    e.preventDefault()
  }

  function handleSearch() {
    
    if (searchAlarm != null) {
      clearTimeout(searchAlarm)
    }
    searchAlarm = setTimeout(selectMatching, 300)

    regexpActive = true
    updateButtons()
  }

  function selectMatching() {
    searchAlarm = null
    let re = null
    if (search.value != "") {
      try {
        re = new RegExp(search.value)
      } catch (e) {
        
        return
      }
    }

    function match(text) {
      return re != null && re.test(text)
    }

    
    selected.forEach(function(v, n) {
      if (!match(nodes[n])) {
        unselect(n, document.getElementById("node" + n))
      }
    })

    
    for (let n = 0; n < nodes.length; n++) {
      if (!selected.has(n) && match(nodes[n])) {
        select(n, document.getElementById("node" + n))
      }
    }

    updateButtons()
  }

  function toggleSvgSelect(elem) {
    
    while (elem != null && elem.parentElement != graph0) {
      elem = elem.parentElement
    }
    if (!elem) return

    
    regexpActive = false

    const n = nodeId(elem)
    if (n < 0) return
    if (selected.has(n)) {
      unselect(n, elem)
    } else {
      select(n, elem)
    }
    updateButtons()
  }

  function unselect(n, elem) {
    if (elem == null) return
    selected.delete(n)
    setBackground(elem, false)
  }

  function select(n, elem) {
    if (elem == null) return
    selected.set(n, true)
    setBackground(elem, true)
  }

  function nodeId(elem) {
    const id = elem.id
    if (!id) return -1
    if (!id.startsWith("node")) return -1
    const n = parseInt(id.slice(4), 10)
    if (isNaN(n)) return -1
    if (n < 0 || n >= nodes.length) return -1
    return n
  }

  function setBackground(elem, set) {
    
    if (elem.nodeName == "TR") {
      elem.classList.toggle("hilite", set)
      return
    }

    
    const p = findPolygon(elem)
    if (p != null) {
      if (set) {
        origFill.set(p, p.style.fill)
        p.style.fill = "#ccccff"
      } else if (origFill.has(p)) {
        p.style.fill = origFill.get(p)
      }
    }
  }

  function findPolygon(elem) {
    if (elem.localName == "polygon") return elem
    for (const c of elem.children) {
      const p = findPolygon(c)
      if (p != null) return p
    }
    return null
  }

  
  function quotemeta(str) {
    return str.replace(/([\\\.?+*\[\](){}|^$])/g, '\\$1')
  }

  
  
  function makeLinkDynamic(id) {
    const elem = document.getElementById(id)
    if (elem == null) return

    
    
    let param = "f"
    if (id == "ignore") param = "i"
    if (id == "hide") param = "h"
    if (id == "show") param = "s"

    
    elem.addEventListener("mouseenter", updater)
    elem.addEventListener("touchstart", updater)

    function updater() {
      elem.href = updateUrl(new URL(elem.href), param)
    }
  }

  
  function updateUrl(url, param) {
    url.hash = ""

    
    
    let re = regexpActive
        ? search.value
        : Array.from(selected.keys()).map(key => quotemeta(nodes[key])).join("|")

    
    const params = url.searchParams
    for (const p of new URLSearchParams(window.location.search)) {
      params.set(p[0], p[1])
    }

    if (re != "") {
      
      if (param != "f" && param != "s" && params.has(param)) {
        const old = params.get(param)
         if (old != "") {
          re += "|" + old
        }
      }
      params.set(param, re)
    } else {
      params.delete(param)
    }

    return url.toString()
  }

  function handleTopClick(e) {
    
    let elem = e.target
    while (elem != null && elem.nodeName != "TR") {
      elem = elem.parentElement
    }
    if (elem == null || elem.children.length < 6) return

    e.preventDefault()
    const tr = elem
    const td = elem.children[5]
    if (td.nodeName != "TD") return
    const name = td.innerText
    const index = nodes.indexOf(name)
    if (index < 0) return

    
    regexpActive = false

    if (selected.has(index)) {
      unselect(index, elem)
    } else {
      select(index, elem)
    }
    updateButtons()
  }

  function updateButtons() {
    const enable = (search.value != "" || selected.size != 0)
    if (buttonsEnabled == enable) return
    buttonsEnabled = enable
    for (const id of ["focus", "ignore", "hide", "show"]) {
      const link = document.getElementById(id)
      if (link != null) {
        link.classList.toggle("disabled", !enable)
      }
    }
  }

  
  updateButtons()

  
  initMenus()
  if (svg != null) {
    initPanAndZoom(svg, toggleSvgSelect)
  }
  if (toptable != null) {
    toptable.addEventListener("mousedown", handleTopClick)
    toptable.addEventListener("touchstart", handleTopClick)
  }

  const ids = ["topbtn", "graphbtn", "peek", "list", "disasm",
               "focus", "ignore", "hide", "show"]
  ids.forEach(makeLinkDynamic)

  
  function addAction(id, action) {
    const btn = document.getElementById(id)
    if (btn != null) {
      btn.addEventListener("click", action)
      btn.addEventListener("touchstart", action)
    }
  }

  addAction("details", handleDetails)
  addAction("closedetails", handleCloseDetails)

  search.addEventListener("input", handleSearch)
  search.addEventListener("keydown", handleKey)

  
  const main = document.getElementById("bodycontainer")
  if (main) {
    main.focus()
  }
}
</script>

<script>viewer("/", ["","main.d","runtime.main","main.a","main.b","main.c","main.main"])</script>


</body></html>